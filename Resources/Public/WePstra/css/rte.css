/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* Reset */
* {
  margin: 0;
  padding: 0; }

html {
  font-size: 100.01%;
  background-color: #FFFFFF; }

body {
  height: 100.01%;
  background-color: #FFFFFF;
  color: #000000;
  font: .75em/1.5 "Arial", "Helvetica", sans-serif;
  -webkit-text-size-adjust: none; }

p {
  margin-bottom: 0.5em; }

ul, dl {
  list-style: none;
  margin-bottom: 0.5em; }

ol {
  margin-left: 20px;
  margin-bottom: 0.5em; }

dt {
  font-weight: 700; }

table {
  border-collapse: collapse; }

img {
  border: none;
  vertical-align: middle; }

h1, h2, h3, h4, h5, h6 {
  font-size: 1em; }

a {
  color: #435052;
  text-decoration: none;
  outline: none;
  cursor: pointer; }

a:hover {
  text-decoration: underline; }

textarea, input, select, option, optgroup, button {
  font: 1em "Arial", "Helvetica", sans-serif; }

button, [type="radio"], [type="checkbox"], [type="submit"], [type="button"], [type="reset"], label[for], select {
  cursor: pointer; }

input, select, textarea {
  outline: none; }

.clear {
  clear: both; }

body {
  font-family: "ff-tisa-web-pro", serif;
  color: #333;
  font-size: 20px;
  line-height: 1.2em; }
  body * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    text-overflow: ellipsis;
    list-style: none;
    -webkit-tap-highlight-color: transparent; }

figure img {
  display: block;
  width: 100%; }

a {
  text-decoration: none;
  color: #000;
  outline: 0; }
  a:hover {
    outline: 0;
    text-decoration: none; }
  a:active, a:focus {
    outline: 0; }

/* Default paragraph styles */
/* Default header styles */
h1, h2, h3, h4, h5, h6 {
  color: #761f36;
  font-family: "ff-tisa-sans-web-pro", sans-serif;
  font-style: inherit;
  font-weight: 400;
  line-height: inherit; }
  h1 small, h2 small, h3 small, h4 small, h5 small, h6 small {
    color: inherit; }

h1 {
  color: #761f36;
  font-size: 30px; }

h2 {
  color: #333;
  font-size: 18px;
  font-weight: 700; }

h3 {
  color: #333;
  font-size: 20px; }

h4 {
  font-size: 20px; }

h5 {
  font-size: 18px; }

h6 {
  font-size: 16px; }

blockquote {
  position: relative;
  padding: 20px 20px 20px 50px;
  border: 1px solid #dadada;
  border-width: 1px 0;
  font-style: italic; }
  blockquote:before {
    content: open-quote;
    position: absolute;
    top: 20px;
    left: 0;
    color: #761f36;
    font-size: 92px;
    font-style: normal;
    line-height: 72px; }

.text-bold {
  font-weight: 700; }

.text-italic {
  font-style: italic; }

.text-left {
  text-align: left; }

.text-center {
  text-align: center; }

.text-right {
  text-align: right; }

.text-uppercase {
  text-transform: uppercase; }

.text-lowercase {
  text-transform: lowercase; }

.text-hide {
  text-indent: -999em; }

.text-hide[class*="icon-"]:before {
  float: left;
  text-indent: 0; }

.error {
  color: #f04124 !important; }

@font-face {
  font-family: 'icons';
  src: url("../fonts/icons.eot?bhk1ff");
  src: url("../fonts/icons.eot?bhk1ff#iefix") format("embedded-opentype"), url("../fonts/icons.woff2?bhk1ff") format("woff2"), url("../fonts/icons.ttf?bhk1ff") format("truetype"), url("../fonts/icons.woff?bhk1ff") format("woff"), url("../fonts/icons.svg?bhk1ff#icons") format("svg");
  font-weight: normal;
  font-style: normal; }

[class^="icon-"]:before, [class*=" icon-"]:before {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icons' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-calendar:before {
  content: "\e901"; }

.icon-check:before {
  content: "\e902"; }

.icon-checked:before {
  content: "\e903"; }

.icon-flag:before {
  content: "\e904"; }

.icon-info:before {
  content: "\e905"; }

.icon-print:before {
  content: "\e906"; }

.icon-burger:before {
  content: "\e900"; }

/*
 * Styles for WYSIWYG editors like TinyMCE or CKEditor
 */
* {
  color: #333;
  font-size: 18px;
  line-height: 1.5em; }

* + p,
* + dl,
* + h1,
* + h2,
* + h3,
* + h4,
* + h5,
* + h6,
* + ol,
* + ul,
* + table,
* + figure,
* + .csc-textpic,
* + .csc-text {
  margin-top: 18px; }

h2 + p,
h3 + p,
h4 + p,
h5 + p,
h6 + p {
  margin-top: 0; }

li {
  position: relative;
  padding-left: 38px; }
  li:before {
    content: '';
    position: absolute;
    top: 12px;
    left: 0;
    width: 6px;
    height: 6px;
    background: #333;
    border-radius: 50%; }
    @media print {
      li:before {
        border: 1px solid #333; } }
  li ol,
  li ul {
    margin-top: 0;
    margin-bottom: 0; }

ol > li {
  counter-increment: ordered-list; }
  ol > li:before {
    content: counter(ordered-list);
    top: 0;
    padding: 0;
    background: none;
    color: #333; }

h1 {
  color: #761f36;
  font-size: 30px;
  font-weight: 400; }

h2 {
  font-size: 18px;
  font-weight: 600;
  line-height: 1.5em; }

h3 {
  font-size: 20px;
  font-weight: 400; }

h4 {
  font-size: 20px;
  font-weight: 400; }

h5 {
  font-size: 18px;
  font-weight: 400; }

h6 {
  font-size: 16px;
  font-weight: 400; }

dt {
  font-weight: 700; }

a {
  color: #c6007b;
  text-decoration: none; }
  a:hover {
    color: #c6007b;
    text-decoration: underline; }

p, li, dl {
  font-family: "ff-tisa-web-pro", serif; }

img {
  display: inline-block;
  vertical-align: middle; }

img[style*="float:left"],
img[style*="float: left"] {
  padding-top: 20px;
  padding-right: 20px; }

img[style*="float:right"],
img[style*="float: right"] {
  padding-top: 20px;
  padding-left: 20px; }

figure img {
  display: block; }

figcaption {
  margin-top: 8px;
  margin-bottom: 16px; }
  figcaption, figcaption * {
    font-size: 12px;
    line-height: 1em; }
  figcaption .copyright-hint:before {
    content: ' ';
    white-space: pre; }

.align-left {
  text-align: left !important; }

.align-center {
  text-align: center !important; }

.align-right {
  text-align: right !important; }

.align-justify {
  text-align: justify !important; }

.indent {
  margin-left: 2em; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
